
using System.Collections.Generic;
using System.Threading.Tasks;
using Generic.Dapper.Model;
using Generic.Data;
using System;
using TechClearingProject.Data.ServiceUtility;
using System.Data;
using Generic.Dapper.Utility;
using Generic.Data.Model;
using Generic.Data.Utilities;

namespace Generic.Dapper.Data
{
    public interface IDapperGeneralSettings
    {
        int PostLoginAudit(LoginAuditObj obj, int postType);
        int PostLoginAttempt(LoginAuditObj obj);
        Task<List<SERVICEChannelObj>> GetServiceChannelAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<SERVICEChannelObj> GetServiceChannel(int itbid, bool isAll, string status = null, bool isTemp = false);
        int PostProcessReset();
        int PostProcessReset2();
        int PostProcessReset3();
        int PostSignOut(LoginAuditObj obj);
        Task<List<UserObj>> GetUserAsync(int itbid, bool isAll, string status = null, bool isTemp = false, bool buffered = false, string connectionString = null);
        // Task<UserObj2> GetUser2Async(int itbid, bool isTemp = false, string status = null, bool buffered = false, string connectionString = null);
        Task<List<UserObj>> GetUserLockOutAsync();
        Task<List<ReportListObj>> GetReportListAsync();
        List<UserObj> GetUserLockOutTemp(string batchId, string userId);
        Task<List<UserObj>> GetUserPasswordResetAsync();
        List<UserObj> GetUserPasswordResetTemp(string batchId, string userId);
        Task<List<RolesObj>> GetRolesAsync(int ItbId, bool IsAll, string status = null, bool isTemp = false, bool buffered = false, string connectionString = null);
        List<RolesObj> GetRoles(int ItbId, bool IsAll, string status = null, bool isTemp = false, bool buffered = false, string connectionString = null);
        List<UserObj> GetUser(int ItbId, bool IsAll, bool isTemp = false, string status = null, bool buffered = false, string connectionString = null);
        List<Approval_Route> GetApprovalRoutePage(int menuId, string userId, short action, decimal? authId = null);
        int GetIfPageRequiresApproval(int menuid, int postType, decimal? authId);
        Task<List<ApproverLineObj>> GetApprovalListForRequestAsync(decimal authId);
        Task<List<RolePrivilegeObj>> GetRolePrivilegeAsync(int roleId, bool buffered = false, string connectionString = null);
        int GetUserAuthorization(int roleId, int menuId, string controller);
        List<RolePrivilegeObj> GetRolePrivilegeTemp(string batchId, string userId);
        Task<UserPrivilege> GetUserPrivilegeAsync(int roleId, int menuId, bool buffered = false, string connectionString = null);
        UserPrivilege GetUserPrivilege(int roleId, int menuId, bool buffered = false, string connectionString = null);
        List<ParentMenu> GetParentMenu(int roleId, string conString = null);
        List<ChildMenu> GetChildMenu(int roleId, string conString = null);
        Task<string> GetMenuById(int menuId);
        RolePrivilegeObj GetMenuPrivilege(int menuId, int roleId);
        Task<RolePrivilegeObj> GetMenuPrivilegeAsync(int menuId, int roleId);
        List<ParentMenu> GetParentMenu2(string conString = null);
        AuthObj GetCheckerList(decimal authList_ItbId, int userinstitution_itbid, int menuId = 0, decimal recordId = 0, string conString = null);
        Task<CompanyProfileObj> GetCompanyProfileAsync(int itbid, bool isTemp = false, string status = null, bool buffered = false, string connectionString = null);
      
        CompanyProfileObj GetCompanyProfile(int itbid, bool isTemp = false, string status = null, bool buffered = false, string connectionString = null);
        Task<List<DepartmentObj>> GetDepartmentAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<DepartmentObj> GetDepartment(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<SectorObj>> GetSectorAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<SectorObj> GetSector(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<PartyTypeObj>> GetPartyTypeAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<PartyTypeObj> GetPartyType(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<PartyObj>> GetPartyAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<PartyObj> GetParty(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<PartyAcctObj>> GetPartyAcctAsync(int party_itbid);
        List<PartyAcctObj> GetPartyAcct(int party_itbid);
        Task<List<PartyAcctObj>> GetPartyAcctTempAsync(int party_itbid, string bid, string user_id);
        List<PartyAcctObj> GetPartyAcctTemp(int party_itbid, string bid, string user_id);
        Task<List<MCCObj>> GetMCCAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<MCCObj> GetMCC(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<MccMscObj>> GetAcquirerMCCAsync(string cbn_code, string mcc_code);
        List<NapsObj> GetNapsTemp(string batchId, string userId, string proc_status);
        Task<List<MccMscObj>> GetAcquirerMCC_TempAsync(string batchId, string mcc_code);
        List<MccMscObj> GetAcquirerMCC_Temp(string batchId, string mcc_code);
        Task<List<BankTypeObj>> GetBankTypeAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<BankTypeObj> GetBankType(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<InstitutionObj>> GetInstitutionAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<InstitutionObj> GetInstitution(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<InstitutionAcctObj>> GetInstitutionAcctAsync(int inst_itbid);
        List<InstitutionAcctObj> GetInstitutionAcct(int inst_itbid);
        Task<List<InstitutionAcctObj>> GetInstitutionAcctTempAsync(int inst_itbid, string bid, string user_id);
        List<InstitutionAcctObj> GetInstitutionAcctTemp(int inst_itbid, string bid, string user_id);
        Task<List<AuthListObj2>> GetAuthList(string deptCode, int roleId, int userinstitution_itbid, string userId, string conString = null);
        Task<List<CountryObj>> GetCountryAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<CountryObj> GetCountry(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<StateObj>> GetStateAsync(int itbid, bool isAll, string status = null, bool isTemp = false, string countryCode = null);
        List<StateObj> GetState(int itbid, bool isAll, string status = null, bool isTemp = false, string countryCode = null);
        Task<List<StateObj>> GetStateFilterAsync(string country_code, string status = "Active");
        List<StateObj> GetStateFilter(string country_code, string status = "Active");
        Task<List<CityObj>> GetCityFilterAsync(string country_code, string state_code, string status = "Active");
        List<CityObj> GetCityFilter(string country_code, string state_code, string status = "Active");
        Task<List<CardSchemeObj>> GetCardSchemeAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<CardSchemeObj> GetCardScheme(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<FrequencyObj>> GetFrequencyAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<FrequencyObj> GetFrequency(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<ChannelObj>> GetChannelAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<ChannelObj> GetChannel(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<CurrencyObj>> GetCurrencyAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<CurrencyObj> GetCurrency(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<MerchantObj> GetMerchantByMid(string mid, string status, string cbn_code);
        Task<List<MerchantObj>> GetMerchantByMidAsync(string mid, string status, string cbn_code);
        Task<List<MerchantObj>> GetMerchantByMidNameAsync(string P_Q, string P_LABEL, string isDefault = "N", string cbn_code = null);

        List<MerchantObj> GetMerchantByMidName(string P_Q, string P_LABEL, string cbn_code = null);
        Task<List<MerchantMscObj>> GetMerchantMSCAsync(string mid, string cbn_code, string mcc_code);
        List<MerchantMscObj> GetMerchantMSC(string mid, string cbn_code, string mcc_code);
        Task<List<MerchantMscObj>> GetMerchantMSCTempAsync(string cbn_code, string batchId, string mcc_code, string userId);
        List<MerchantMscObj> GetMerchantMSCTemp(string cbn_code, string batchId, string mcc_code, string userId);
        Task<List<TerminalObj>> GetTerminalByMidAsync(string mid, string tid);
        List<TerminalObj> GetTerminalByMid(string mid, string tid);
        Task<List<TerminalObj>> GetTerminalByItbIdAsync(decimal itbid);
        Task<List<MerchantAcctObj>> GetMerchantAcctTempAsync(string batchid, string userId);
        List<MerchantAcctObj> GetMerchantAcctTemp(string batchid, string userId);
        List<TerminalObj> GetMerchantTerminalTemp(string batchid, string userId, int reqType = 1);
        MerchantObj GetMerchantDetailFromTemp(string batchid, string userId);

        Task<List<MerchantAcctObj>> GetMerchantAcctAsync(string mid);
        List<MerchantAcctObj> GetMerchantAcct(string mid);
        List<EmailObj> GetMakerEmail(string makerId);
        List<EmailObj> GetApprovers_Mail_Email(decimal authId);
        List<EmailObj> GetAuthorizeEmailList(int MENUID, string DeptCode, int userInstitutionItbid);
        List<EmailObj> GetApproverIdEmail(string userName);
        SM_INSTITUTION GetInstitutionName(int P_InstItbid);
        List<MailGroupObj> GetGroupEmail(int itbid, bool IsAll, bool IsTemp, string batchId = null);
        Task<List<SharingPartyObj>> GetMerchantMsc2DetailAsync(string P_MERCHANTID, string mcc_code);
        List<SharingPartyObj> GetMerchantMsc2Detail(string P_MERCHANTID, string mcc_code);
        List<DropdownObj> GetInstitutionParty();
        Task<List<MDropdownObj>> GetMerchantSearchDropDownAsync(string P_Q);
        List<MDropdownObj> GetMerchantSearchDropDown(string P_Q);
        Task<List<RvGroupObj>> GetRvGroupAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<RvGroupObj> GetRvGroup(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<MerchantAcctObj> GetMerchantAcctByItbIdAsync(decimal itbid);
        MerchantAcctObj GetMerchantAcctByItbId(decimal itbid);
        Task<List<RvHeadObj>> GetRvHeadTempAsync(string bid, string user_id);
        List<RvHeadObj> GetRvHeadTemp(string bid, string user_id);
        string GetNextRVCode();
        Task<List<RvHeadObj>> GetRvHead_By_GroupCodeAsync(string group_code, int offset = 0, int rows = 50);
        Task<List<RvDrAcctObj>> GetRvDrAcct_By_GroupCodeAsync(string group_code);
        RvHeadObj GetRvHead(int ITBID);
        Task<List<MerchantUpldObj>> GetMerchantUploadTempAsync(string batchId, string source, string userId, string status);
        List<MerchantUpldObj> GetMerchantUploadTemp(string batchId, string source, string userId, string status);
        InstitutionObj GetINSTITUTION_BY_CBNCODE(string P_CBNCODE);
        LastMidObj GetLastMidTidGenerated(string P_PREFIX, string P_CBNCODE, string P_ID_TYPE);
        int GetExistedUserNameCount(string userName);
        Task<List<SettlementOptionObj>> GetSettlementOptionAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<SettlementOptionObj> GetSettlementOption(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<SettlementRuleObj>> GetSettlementRuleTempAsync(int option_itbid, string bid, string user_id);
        List<SettlementRuleObj> GetSettlementRuleTemp(int option_itbid, string bid, string user_id);
        Task<List<SettlementRuleObj>> GetSettlementRuleAsync(int option_itbid);
        List<SettlementRuleObj> GetSettlementRule(int option_itbid);
        string GetTerminalInstitutionCbnCode(string TERMINALID);
        List<SM_MERCHANTACCT> GetMerchantAcct(string mid, string acctNo);
        List<MerchantUpldObj> GetMerchantUpdateUploadTemp(string batchId, string source, string userId, string status);
        Task<List<DataBinObj>> GetBinAsync(decimal itbid, bool isAll, string cbncode = null);
        List<DataBinObj> GetBin(decimal itbid, bool isAll, string cbncode = null);
        List<DataBinObj> GetBinTemp(string userId, string batchId);

        List<ExchangeRateObj> GetExchangeRateTemp(string userId, string batchId);
        int ValidateBin(string cbnCode, string scheme, string bin, int eventType = 1, decimal itbid = 0);
        //int ValidateSetRecon(string cbnCode, string scheme, string bin, int eventType = 1, decimal itbid = 0);
        int ValidateExchRate(string cbnCode, string scheme, string ccyCode, int eventType = 1, decimal itbid = 0);
        OutPutObj ValidateIfCanDeleteMAcct(decimal itbid);
        List<DropdownObj> GetMerchantAcct_Merge(string mid, string userId);
        Task<List<DropdownObj>> GetMSC2PartyAcctAsync(decimal itbid, string option);
        List<DropdownObj> GetMSC2PartyAcct(decimal itbid, string option);
        Task<List<BillerObj>> GetBillerAsync(int itbid, bool isAll, string status = null, bool isTemp = false);
        List<BillerObj> GetBiller(int itbid, bool isAll, string status = null, bool isTemp = false);
        Task<List<BillerMscObj>> GetBillerMscAsync(string billerCode, int channelId);
        List<BillerMscObj> GetBillerMsc(string billerCode, int channelId);
        Task<List<BillerMscObj>> GetBillerMscTempAsync(string batchId, string userId);
        List<BillerMscObj> GetBillerMscTemp(string batchId, string userId);
        Task<List<SharingPartyObj>> GetBillerFee1SharingPartyAsync(string billerCode, decimal mscItbId);
        List<SharingPartyObj> GetBillerFee1SharingParty(string billerCode, decimal mscItbId);
        Task<List<SharingPartyObj>> GetBillerFee1SharingPartyTempAsync(string batchId, string userId);
        List<SharingPartyObj> GetBillerFee1SharingPartyTemp(string batchId, string userId);
        List<MApproverObj> GetMenuApprover();
        Task<List<MApproverObj>> GetMenuApproverOfficersAsync(int menuId);
        Task<List<NapsObj>> GetNapsEnquiryAsync(DateTime? fromDate = null, DateTime? toDate = null, string batchId = null, int rows = 100, int offset = 0);
        Task<int> GetNapsEnquiryCountAsync(DateTime? fromDate = null, DateTime? toDate = null, string batchId = null);
        Task<List<NapsObj>> GetNapsApprovedAsync(string batchid);
        List<ApprovalRouteOffObj> GetRouteOfficerTemp(string bid, string user_id);
        ApprovalRouteOffObj GetRouteOfficer(int ITBID);
        List<ApprovalRouteObj> GetAppRouteTemp(int recordId);
        List<ApprovalRouteOffObj> GetAppRouteOfficerTemp(string bid, string user_id);
        int PostSetAdjustmentEntry(SM_NAPS_NIBSS_TEMP d);
        int UpdateSettlementReportFlag(SM_NAPS_NIBSS_TEMP d);
        int ValidateRvHead(string rvCode, string groupCode);
        List<RvDrAcctUpldObj> GetRvDrAcctTemp(string userId, string batchId);
        List<RvHeadUpldObj> GetRvHeadUploadTemp(string userId, string batchId);
        //Task<List<RvHeadObj>> GetRvDrAcctTempAsync(string bid, string user_id);
        Task<List<ExchangeRateObj>> GetExchangeRateAsync(int itbid, bool isAll, string cbncode = null);
        List<ExchangeRateObj> GetExchangeRate(int itbid, bool isAll, string cbncode = null);
        Task<List<RvGroupObj>> GetRvGroupByMidAsync(string mid);
    }
}
